{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","border","overflowY","height","children","App","onsearchchange","e","setState","target","value","state","fetch","then","response","json","users","filterrecords","this","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kOAceA,EAZF,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,GAAGC,EAAiB,EAAjBA,KAAKC,EAAY,EAAZA,MAEtB,OACO,yBAAMC,UAAU,uDACd,yBAAKC,IAAG,+BAA0BJ,EAA1B,YAAwCK,IAAI,WACpD,6BACE,4BAAKJ,GACJ,2BAAIC,MCiBFI,EArBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAIpB,OACO,6BAEDA,EAAOC,KAAI,SAACC,EAAKC,GAChB,OAAQ,kBAAC,EAAD,CACRC,IAAMD,EACNV,GAAIO,EAAOG,GAAGV,GACdC,KAAMM,EAAOG,GAAGT,KACfC,MAAOK,EAAOG,GAAGR,aCFVU,EAZG,SAAC,GAA8B,EAA7BC,YAA8B,IAAlBC,EAAiB,EAAjBA,aAE7B,OACC,yBAAKX,UAAU,OACd,2BAAOY,KAAK,SAASZ,UAAU,mCAAmCa,YAAY,SAASC,SAAWH,MCKxFI,EATA,SAACC,GAEf,OACE,yBAAKC,MAAQ,CAACC,OAAO,iBAAiBC,UAAU,SAASC,OAAO,UACjEJ,EAAMK,WCsCOC,G,wDArCd,aAAc,IAAD,8BACZ,gBAaDC,eAAgB,SAACC,GAChB,EAAKC,SAAS,CAACf,YAAac,EAAEE,OAAOC,SAbrC,EAAKC,MAAQ,CACZxB,OAAO,GACPM,YAAa,IAJF,E,gEAQO,IAAD,OAClBmB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAACrB,OAAS6B,S,+BAMhC,IAAD,OACDC,EAAgBC,KAAKP,MAAMxB,OAAOgC,QAAO,SAAAhC,GAC9C,OAAOA,EAAON,KAAKuC,cAAcC,SAAS,EAAKV,MAAMlB,YAAY2B,kBAGlE,OAEC,yBAAKrC,UAAU,MACd,2CACA,kBAAC,EAAD,CAAWW,aAAcwB,KAAKZ,iBAC9B,kBAAC,EAAD,KACM,kBAAC,EAAD,CAAUnB,OAAS8B,U,GA9BVK,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OAAO,6BAAK,kBAAC,EAAD,OAAcC,SAASC,eAAe,SD0HrD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7049f32b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Card = ({id,name,email})  => {\r\n\r\n\treturn(\r\n        <div  className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n          <img src={`https://robohash.org/${id}?200*200`} alt=\"robot1\"/>\r\n          <div>\r\n            <h2>{name}</h2>\r\n             <p>{email}</p>\r\n          </div>\r\n        </div>\r\n\t\t);\r\n}\r\nexport default Card;","import React from 'react';\r\n\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n\t\r\n\r\nreturn (\r\n       <div>\r\n\t    {\r\n\t    \trobots.map((user,i) =>{\r\n\t\t     return  <Card\r\n\t\t     key ={i} \r\n\t\t     id={robots[i].id} \r\n\t\t     name={robots[i].name}\r\n\t\t      email={robots[i].email}\r\n\t\t      />\r\n           \t})\r\n\t    }\r\n\t    </div>\r\n\t);\r\n\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchfield,searchChange}) =>{\r\n   \r\n   return (\r\n   \t<div className=\"pa2\">\r\n     <input type=\"search\" className=\"pa3 ba b--green bg-lightest-blue\" placeholder=\"Search\" onChange ={searchChange}/>\r\n</div>\r\n\r\n   \t);\r\n\r\n}\r\n\r\n\r\nexport default SearchBox;","import React from \"react\";\r\n\r\n\r\nconst Scroll = (props) =>{\r\n\r\n\treturn (\r\n   <div style ={{border:\"3px solid #fff\",overflowY:\"scroll\",height:\"800px\"}}>\r\n\t{props.children}\r\n\t</div>\r\n\r\n\t)\r\n}\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\nclass App extends Component{\r\n\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots:[],\r\n\t\t\tsearchfield: \"\"\r\n\t\t}\r\n\t\r\n\t}\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then(users => this.setState({robots : users}));\r\n\t\t\r\n\t}\r\n\tonsearchchange =(e) =>{\r\n\t\tthis.setState({searchfield: e.target.value});\r\n\t}\r\nrender(){\r\n\tconst filterrecords = this.state.robots.filter(robots =>{\r\n\t\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n\t})\r\n\t\r\n\treturn (\r\n\r\n\t\t<div className=\"tc\">\r\n\t\t <h1 >RoboFriends</h1>\r\n\t\t <SearchBox searchChange={this.onsearchchange}/>\r\n\t\t <Scroll>\r\n         <CardList robots ={filterrecords} />\r\n         </Scroll>\r\n\r\n         </div>\r\n\t\t);\r\n}\r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n//import { robots } from './robots';\n\n\nReactDOM.render(<div><App /></div>,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}